function data=testDelays()
%% Script to test the scanner delays
%
% Developed by Elaine Kearney, Jan 2020 (elaine-kearney.com)
% Based on previous scripts by Liz Heller Murray
% Matlab 2019b
%

% key inputs (seconds)
nTrials = 16;
ntriggers = 5;

% read sound file
sine=[0.00653076171875;0.0130615234375;0.019622802734375;0.026153564453125;0.03271484375;0.03924560546875;0.0457763671875;0.05230712890625;0.058868408203125;0.065399169921875;0.071929931640625;0.07843017578125;0.0849609375;0.09149169921875;0.097991943359375;0.104522705078125;0.11102294921875;0.117523193359375;0.1240234375;0.130523681640625;0.136993408203125;0.143463134765625;0.14996337890625;0.15643310546875;0.162872314453125;0.169342041015625;0.17578125;0.182220458984375;0.18865966796875;0.195068359375;0.20147705078125;0.2078857421875;0.21429443359375;0.220672607421875;0.22705078125;0.233428955078125;0.239776611328125;0.246124267578125;0.252471923828125;0.2587890625;0.265106201171875;0.27142333984375;0.2777099609375;0.28399658203125;0.290283203125;0.296539306640625;0.302764892578125;0.308990478515625;0.315216064453125;0.3214111328125;0.327606201171875;0.33380126953125;0.3399658203125;0.346099853515625;0.35223388671875;0.358367919921875;0.36444091796875;0.37054443359375;0.376617431640625;0.382659912109375;0.388702392578125;0.39471435546875;0.400726318359375;0.406707763671875;0.412689208984375;0.41864013671875;0.424591064453125;0.43048095703125;0.4364013671875;0.4422607421875;0.4481201171875;0.4539794921875;0.459808349609375;0.465606689453125;0.47137451171875;0.477142333984375;0.482879638671875;0.488616943359375;0.494293212890625;0.5;0.505645751953125;0.51129150390625;0.51690673828125;0.522491455078125;0.528045654296875;0.533599853515625;0.53912353515625;0.54461669921875;0.55010986328125;0.5555419921875;0.56097412109375;0.566375732421875;0.57177734375;0.577117919921875;0.58245849609375;0.5877685546875;0.593048095703125;0.598297119140625;0.603546142578125;0.608734130859375;0.613922119140625;0.61907958984375;0.62420654296875;0.629302978515625;0.634368896484375;0.639434814453125;0.644439697265625;0.649444580078125;0.654388427734375;0.659332275390625;0.66424560546875;0.66912841796875;0.6739501953125;0.67877197265625;0.683563232421875;0.6883544921875;0.693084716796875;0.697784423828125;0.70245361328125;0.70709228515625;0.711700439453125;0.716278076171875;0.7208251953125;0.725372314453125;0.7298583984375;0.73431396484375;0.738739013671875;0.743133544921875;0.74749755859375;0.7518310546875;0.756134033203125;0.7603759765625;0.764617919921875;0.768829345703125;0.77301025390625;0.777130126953125;0.781219482421875;0.785308837890625;0.789337158203125;0.7933349609375;0.79730224609375;0.801239013671875;0.805145263671875;0.808990478515625;0.812835693359375;0.816619873046875;0.82037353515625;0.8240966796875;0.827789306640625;0.831451416015625;0.8350830078125;0.838653564453125;0.842193603515625;0.845703125;0.84918212890625;0.852630615234375;0.85601806640625;0.859405517578125;0.86273193359375;0.865997314453125;0.8692626953125;0.872467041015625;0.87567138671875;0.878814697265625;0.88189697265625;0.884979248046875;0.88800048828125;0.8909912109375;0.893951416015625;0.8968505859375;0.89971923828125;0.902557373046875;0.905364990234375;0.90814208984375;0.910858154296875;0.913543701171875;0.916168212890625;0.91876220703125;0.92132568359375;0.923858642578125;0.926361083984375;0.928802490234375;0.93121337890625;0.933563232421875;0.935882568359375;0.93817138671875;0.9404296875;0.942626953125;0.944793701171875;0.946929931640625;0.949005126953125;0.9510498046875;0.953033447265625;0.95501708984375;0.956939697265625;0.95880126953125;0.96063232421875;0.962432861328125;0.964202880859375;0.965911865234375;0.96759033203125;0.969207763671875;0.970794677734375;0.97235107421875;0.973876953125;0.975341796875;0.97674560546875;0.978118896484375;0.979461669921875;0.98077392578125;0.982025146484375;0.983245849609375;0.984405517578125;0.98553466796875;0.98663330078125;0.9876708984375;0.988677978515625;0.9896240234375;0.99053955078125;0.991424560546875;0.99224853515625;0.9930419921875;0.993804931640625;0.9945068359375;0.99517822265625;0.99578857421875;0.996368408203125;0.99688720703125;0.997406005859375;0.997833251953125;0.998260498046875;0.998626708984375;0.998931884765625;0.99920654296875;0.99945068359375;0.9996337890625;0.999786376953125;0.999908447265625;0.999969482421875;0.999969482421875;0.999969482421875;0.999908447265625;0.999786376953125;0.9996337890625;0.99945068359375;0.99920654296875;0.998931884765625;0.998626708984375;0.998260498046875;0.997833251953125;0.997406005859375;0.99688720703125;0.996368408203125;0.99578857421875;0.99517822265625;0.9945068359375;0.993804931640625;0.9930419921875;0.99224853515625;0.991424560546875;0.99053955078125;0.9896240234375;0.988677978515625;0.9876708984375;0.98663330078125;0.98553466796875;0.984405517578125;0.983245849609375;0.982025146484375;0.98077392578125;0.979461669921875;0.978118896484375;0.97674560546875;0.975341796875;0.973876953125;0.97235107421875;0.970794677734375;0.969207763671875;0.96759033203125;0.965911865234375;0.964202880859375;0.962432861328125;0.96063232421875;0.95880126953125;0.956939697265625;0.95501708984375;0.953033447265625;0.9510498046875;0.949005126953125;0.946929931640625;0.944793701171875;0.942626953125;0.9404296875;0.93817138671875;0.935882568359375;0.933563232421875;0.93121337890625;0.928802490234375;0.926361083984375;0.923858642578125;0.92132568359375;0.91876220703125;0.916168212890625;0.913543701171875;0.910858154296875;0.90814208984375;0.905364990234375;0.902557373046875;0.89971923828125;0.8968505859375;0.893951416015625;0.8909912109375;0.88800048828125;0.884979248046875;0.88189697265625;0.878814697265625;0.87567138671875;0.872467041015625;0.8692626953125;0.865997314453125;0.86273193359375;0.859405517578125;0.85601806640625;0.852630615234375;0.84918212890625;0.845703125;0.842193603515625;0.838653564453125;0.8350830078125;0.831451416015625;0.827789306640625;0.8240966796875;0.82037353515625;0.816619873046875;0.812835693359375;0.808990478515625;0.805145263671875;0.801239013671875;0.79730224609375;0.7933349609375;0.789337158203125;0.785308837890625;0.781219482421875;0.777130126953125;0.77301025390625;0.768829345703125;0.764617919921875;0.7603759765625;0.756134033203125;0.7518310546875;0.74749755859375;0.743133544921875;0.738739013671875;0.73431396484375;0.7298583984375;0.725372314453125;0.7208251953125;0.716278076171875;0.711700439453125;0.70709228515625;0.70245361328125;0.697784423828125;0.693084716796875;0.6883544921875;0.683563232421875;0.67877197265625;0.6739501953125;0.66912841796875;0.66424560546875;0.659332275390625;0.654388427734375;0.649444580078125;0.644439697265625;0.639434814453125;0.634368896484375;0.629302978515625;0.62420654296875;0.61907958984375;0.613922119140625;0.608734130859375;0.603546142578125;0.598297119140625;0.593048095703125;0.5877685546875;0.58245849609375;0.577117919921875;0.57177734375;0.566375732421875;0.56097412109375;0.5555419921875;0.55010986328125;0.54461669921875;0.53912353515625;0.533599853515625;0.528045654296875;0.522491455078125;0.51690673828125;0.51129150390625;0.505645751953125;0.5;0.494293212890625;0.488616943359375;0.482879638671875;0.477142333984375;0.47137451171875;0.465606689453125;0.459808349609375;0.4539794921875;0.4481201171875;0.4422607421875;0.4364013671875;0.43048095703125;0.424591064453125;0.41864013671875;0.412689208984375;0.406707763671875;0.400726318359375;0.39471435546875;0.388702392578125;0.382659912109375;0.376617431640625;0.37054443359375;0.36444091796875;0.358367919921875;0.35223388671875;0.346099853515625;0.3399658203125;0.33380126953125;0.327606201171875;0.3214111328125;0.315216064453125;0.308990478515625;0.302764892578125;0.296539306640625;0.290283203125;0.28399658203125;0.2777099609375;0.27142333984375;0.265106201171875;0.2587890625;0.252471923828125;0.246124267578125;0.239776611328125;0.233428955078125;0.22705078125;0.220672607421875;0.21429443359375;0.2078857421875;0.20147705078125;0.195068359375;0.18865966796875;0.182220458984375;0.17578125;0.169342041015625;0.162872314453125;0.15643310546875;0.14996337890625;0.143463134765625;0.136993408203125;0.130523681640625;0.1240234375;0.117523193359375;0.11102294921875;0.104522705078125;0.097991943359375;0.09149169921875;0.0849609375;0.07843017578125;0.071929931640625;0.065399169921875;0.058868408203125;0.05230712890625;0.0457763671875;0.03924560546875;0.03271484375;0.026153564453125;0.019622802734375;0.0130615234375;0.00653076171875];
ysine=48000;
sine=sine(find(sine>0,1,'first'):find(sine>0,1,'last'));
sine=repmat([sine;zeros(ysine/10-numel(sine),1)],ntriggers ,1); % 5 clicks 100ms apart starting @ t=0
sine=[.001*randn(290,1);sine];

try, a=audioDeviceReader('Device','asdf'); catch me; str=regexp(regexprep(me.message,'.*Valid values are:',''),'"([^"]*)"','tokens'); str=[str{:}]; end;
disp(char(arrayfun(@(n)sprintf('Device #%d: %s ',n,str{n}),1:numel(str),'uni',0))); ID=input('Input device # : ');
micDevName=str{ID};

audiodevreset;
info=audiodevinfo;
disp(char(arrayfun(@(n)sprintf('Device #%d: %s ',n,info.output(n).Name),1:numel(info.output),'uni',0))); ID=input('Output device # : ');
sinePlayer = audioplayer(sine,ysine,24,info.output(ID).ID);
%sinePlayer = audioplayer(sine,44100,24,info.output(ID).ID);
%sinePlayer = audioplayer(sine(1:4:end),ysine/4,24,info.output(ID).ID);
%sinePlayer = audioplayer(sine(1:20:end),ysine/20,24,info.output(ID).ID);

expParams.recordLen = 2.5;
expParams.sr = 48000;
nSamples = expParams.recordLen*expParams.sr;
frameDur = .050;                 % frame duration in seconds
expParams.frameLength = expParams.sr*frameDur;      % framelength in samples
deviceReader = audioDeviceReader(...
    'Device', micDevName, ...
    'SamplesPerFrame', expParams.frameLength, ...
    'SampleRate', expParams.sr, ...
    'BitDepth', '24-bit integer');

CLOCK = ManageTime('start');                        % resets clock to t=0 (first-trial start-time)

% real scan
 for n = 1:nTrials
     recAudio = zeros(nSamples,1);       % initialize variable to store audio
     nMissingSamples = 0;                % cumulative n missing samples between frames
     frameCount = 1;                     % counter for # of frames (starting at first frame)
     endIdx = 0;                         % initialize idx for end of frame
     
     setup(deviceReader);
     
     TIME_RECORDING_ALL=zeros(1,ceil(expParams.recordLen/frameDur));
     pause(rand);
     fprintf('\nScanner Trigger (%d/%d)\n',n,nTrials)

     % sends trigger
     TIME_RECORDING_WISHSTART=ManageTime('current', CLOCK);
     [nill, nill] = deviceReader(); % first sample after this line finishes will be audio t=0
     TIME_RECORDING_START=ManageTime('current', CLOCK);
     TIME_TRIGGER_START=TIME_RECORDING_START;
     
     play(sinePlayer);
     TIME_TRIGGER_END=ManageTime('current', CLOCK);

     % records audio
     while endIdx < nSamples
         % find beginning/end indices of frame
         begIdx = (frameCount*expParams.frameLength)-(expParams.frameLength-1) + nMissingSamples;
         endIdx = (frameCount*expParams.frameLength) + nMissingSamples;
         
         % read audio data
         [audioFromDevice, numOverrun] = deviceReader();     % read one frame of audio data % note: audio t=0 corresponds to first call to deviceReader, NOT to time of setup(...)
         TIME_RECORDING_ALL(frameCount)=ManageTime('current', CLOCK);
         %if frameCount==1, play(sinePlayer); end

         numOverrun = double(numOverrun);    % convert from uint32 to type double
         if numOverrun > 0, fprintf('.'); recAudio(begIdx:begIdx+numOverrun-1) = 0; end      % set missing samples to 0
         recAudio(begIdx+numOverrun:endIdx+numOverrun) = audioFromDevice;    % save frame to audio vector
         nMissingSamples = nMissingSamples + numOverrun;     % keep count of cumulative missng samples between frames
         frameCount = frameCount+1;
     end
     TIME_RECORDING_END=ManageTime('current', CLOCK);
     release(deviceReader);
     clf;
     plot((0:numel(recAudio)-1)/expParams.sr,recAudio); 
     threshold(n)=prctile(abs(recAudio),99.9);
     idxstart=find(abs(recAudio)>threshold(n),1,'first');
     delay=(idxstart/expParams.sr)*1000;
     if isempty(delay), title('no scan sound detected (or sound too low)');
     else xline(delay/1000); title(sprintf('t0 = %d ms',round(delay))); 
     end
     disp(TIME_RECORDING_END-TIME_RECORDING_START);
     thisdata=struct('audio',recAudio,'times',[TIME_RECORDING_WISHSTART, TIME_TRIGGER_START, TIME_TRIGGER_END, TIME_RECORDING_START, TIME_RECORDING_ALL, TIME_RECORDING_END],'delay',delay);
     data(n)=thisdata;
 end
if ~nargout, save('data_testDelays.mat','data'); end

if 1
    try
        t=cat(1,data.times);
        subplot(511); bar(t(:,2)-t(:,1)); title('time delay to start recording (s)');xlabel('trial number')
        subplot(512); bar(t(:,3)-t(:,2)); title('time to complete trigger command (s)');xlabel('trial number')
        subplot(513); bar(t(:,end)-t(:,4)); title('time to complete recording (s)');xlabel('trial number')
        subplot(514); plot(diff(t(:,4:end-1)',1,1),'.-'); title('time to acquire each frame (s)');xlabel('frame number')
        subplot(515); plot((0:numel(data(1).audio)-1)/expParams.sr,cat(2,data.audio)); title(sprintf('audio samples (%d trigger signals sent at t=0)',ntriggers));xlabel('time (s)')
        d=arrayfun(@(n)find([abs(data(n).audio(1:expParams.sr))>mean(threshold);true],1,'first'),1:numel(data))/expParams.sr;
        disp(d)
    end
end

end